const fetch = require('node-fetch');
const fs = require('fs');
const idAdmin = 592775497;
const URL = {
  // POST: `https://sheets.googleapis.com/v4/spreadsheets/AIzaSyACvURZ36YS0q1lcePVxO13mLWuu02uq6g/values:batchUpdate`,
  POST: `https://script.google.com/macros/s/AKfycby_hcQQ99DAAm1y7E8pZyKHc_OBu0spx94LPorq3m60qhrdPtcR/exec`,
  GET801: `https://script.google.com/macros/s/AKfycby_hcQQ99DAAm1y7E8pZyKHc_OBu0spx94LPorq3m60qhrdPtcR/exec`,
  GET901: `https://script.google.com/macros/s/AKfycbxlU4-ran0HBA9kFVPT0uh_xxZgHJU2PipOHWVZhcEJEJThaZuK/exec`
};
// –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –±–æ—Ç–∞ –ª–µ–∂–∞—â–∏–µ –Ω–∞ Yandex Object S–Ωtorage; –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
const PICTURE = {
  PLAN8: "https://storage.yandexcloud.net/img-bot-bucket/tg-bot-img/Ekaterinburg_8floor.jpg",
  PLAN9: 'https://storage.yandexcloud.net/img-bot-bucket/tg-bot-img/Ekaterinburg_9floor.jpg',
  BILBO: 'https://storage.yandexcloud.net/img-bot-bucket/tg-bot-img/1603267171549.jpg',
  EKB: 'https://storage.yandexcloud.net/img-bot-bucket/tg-bot-img/mapEkb.jpg',
}
const AUDIO = [
  "https://storage.yandexcloud.net/img-bot-bucket/tg-bot-audio/Defend Castle.mp3",
  "https://storage.yandexcloud.net/img-bot-bucket/tg-bot-audio/Win Battle.mp3",
  "https://storage.yandexcloud.net/img-bot-bucket/tg-bot-audio/LoseCombat.mp3",
  "https://storage.yandexcloud.net/img-bot-bucket/tg-bot-audio/Surrender Battle.mp3",
]
const randArr = (arr) => {
  const rand = Math.floor(Math.random() * arr.length);
  return arr[rand]
}
// –∫–æ–Ω—Ñ–∏–≥ –≤—ã–∑–æ–≤–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const inline_keyboard = [
  [{
    // text: `–ü–ª–∞–Ω 8 —ç—Ç–∞–∂–∞ ${emoji.get('ru')}`,
    text: '–ü–ª–∞–Ω 8 —ç—Ç–∞–∂–∞',
    callback_data: 'plan8' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
  }, {
    text: '–ü–ª–∞–Ω 9 —ç—Ç–∞–∂–∞', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
    callback_data: 'plan9' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
  }],
  [{
    text: '–ö–∞–∫ –¥–µ–ª–∞ —É –ë–∏–ª—å–±–æ ?',
    callback_data: 'textB'
  }],
  [{
      text: '–∫–æ–ª-–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç –Ω–∞ 8 —ç—Ç–∞–∂–µ',
      callback_data: '8floor'
    },
    {
      text: '–∫–æ–ª-–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Ä.–º. –Ω–∞ 9 —ç—Ç–∞–∂–µ',
      callback_data: '9floor'
    }
  ],
  [{
    text: '–ú—É–∑—ã–∫–∞',
    callback_data: 'musik'
  }],
  [{
    text: '–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ',
    url: 'https://t.me/EgorPrishedko' //–≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞
  }]
];

const keyboard = [
  [{
    text: '–£–º–Ω–∞—è –º—ã—Å–ª—å'
  }],
  [{
    text: '–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É'
  }],
  [{
    text: '–î–∞–π—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º(–Ω–µ—Ç)'
  }],
  [{
    text: '–ö–∏–Ω—É—Ç—å –º–æ–Ω–µ—Ç–∫—É üëç'
  }]
];
const adapter = function (data) {
  var result = []
  var dataArray = data.result
  console.log(`dataArray.length: `, dataArray.length)
  for (var i = 0; i < dataArray.length; i++) {
    var nextArray = dataArray[i]
    var adapterArray = {
      id: nextArray[0],
      titlle: nextArray[1],
      company: nextArray[2],
      departmens: nextArray[3],
      otdel: nextArray[4],
      gender: nextArray[5],
      coordinateX: nextArray[6],
      coordinateY: nextArray[7],
      avatar: nextArray[8],
      timein: nextArray[9],
      timeout: nextArray[10],
      description: nextArray[11],
      photo: nextArray[12],
      notebook: nextArray[13],
      apllebook: nextArray[14],
      sistemnik: nextArray[15],
      telephone: nextArray[16],
    }

    result.push(adapterArray)

  }
  console.log(`result: `, result.length)
  return result;
}

const {
  random,
  includes
} = require('lodash');
// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤–æ —Ñ—Ä–∞–∑–µ —é–∑–µ—Ä–∞:
function getTrigger(str) {
  const triggerWords = ['–¥—É—Ä–∞–∫', '–¥—É—Ä–∞', '—Ç—É–ø–æ–π', '—É–º—Ä–∏', '–≥–ª—É–ø—ã–π', '–≥–ª—É–ø', `–¥—É—Ä–æ–π`];
  for (let item of triggerWords) {
    if (includes(str, item.toLowerCase())) {
      return true;
    }
  }
  return false;
}

// API "—É–º–Ω—ã—Ö –º—ã—Å–ª–µ–π":
const api = `http://api.forismatic.com/api/1.0/?method=getQuote&format=json&key=${random(1, 999999)}&lang=ru`;
// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
const donateUrl = 'https://sobe.ru/na/vkusnyawka_dlya_bilbowki';
// –°—ã–ª–∫–∞ –Ω–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∞—Ö
const pageEkbUrl = 'https://yandex.ru/maps/geo/yekaterinburg/53166537/?ll=60.601571%2C56.788751&source=wizgeo&utm_medium=maps-desktop&utm_source=serp&z=10';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö c –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã:
async function getData(url) {
  try {
    const data = await fetch(url);
    const json = await data.json();
    const answer = adapter(json);
    return answer;
  } catch (err) {
    console.error('Fail to fetch data: ' + err);
    return '–ú—ã—Å–ª—å –ø–æ—Ç–µ—Ä—è–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.';
  }
}
/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≥—É–≥–ª —Ç–∞–± –∏ –≤–æ–∑–≤—Ä–∞—Ç –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞
 * @param {string} url –∞–¥—Ä–µ—Å –≥–¥–µ –±—Ä–∞—Ç—å
 * @returns {number} –∫–æ–ª-–≤–æ —Ä.–º.
 */
const sendQuantity = async (url) => {
  let arrSpace = await getData(url)
  return arrSpace.length;
}
/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã:
 * @param {string} url
 * @returns {string} —Ü–∏—Ç–∞—Ç–∞
 */
const sendQuote = async (url) => {
  try {
    const data = await fetch(url);
    const json = await data.json();
    const quote = json.quoteText;
    const author = json.quoteAuthor.length === 0 ? '–ê–≤—Ç–æ—Ä –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω' : json.quoteAuthor;
    return `<b>${quote}</b>\n\u2014 <i>${author}</i>`;
  } catch (err) {
    console.error('Fail to fetch data: ' + err);
    return '–ú—ã—Å–ª—å –ø–æ—Ç–µ—Ä—è–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.';
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
const forTitleFilter = async (url, filter) => {
  let arrSpace = await getData(url)
  return arrSpace.filter((place) => {
    return place.titlle.toLowerCase() === filter;
  });
};
// –Ø–Ω–¥–µ–∫—Å-—Ñ—É–Ω–∫—Ü–∏—è:
module.exports.bot = async (event) => {
  try {
    const body = JSON.parse(event.body);
    // –æ–±—å—è–≤–ª—è–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let phone = false // –Ω–æ—Ä–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —é–∑–µ—Ä–∞
    let first_name;
    let botMsg;
    let photoUrl;
    let redirectUrl;
    let inlineKeyText;
    let audioUrl;
    let userMsg = "";
    let isFlag = false;
    let isPhoto = false;
    let isAudio = false;
    let isWebUrl = false;
    let isSendAdmin = false;
    let msg = {};

    console.log(`---body------` + JSON.stringify(body))

    // –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if (body.callback_query) {
      console.log("=====================plan8========================")
      const queryMsg = body.callback_query.data
      first_name = body.callback_query.from.first_name; // –∏–º—è —Ç–æ–≥–æ –∫—Ç–æ –ø—Ä–∏—à—ë–ª
      if (queryMsg === 'plan8') {
        console.log(body.callback_query.from + " - body.callback_query.from")
        first_name = body.callback_query.from.first_name; // –∏–º—è —Ç–æ–≥–æ –∫—Ç–æ –ø—Ä–∏—à—ë–ª
        isPhoto = true;
        inlineKeyText = '–ü–ª–∞–Ω 8 —ç—Ç–∞–∂–∞';
        photoUrl = PICTURE.PLAN8;
        redirectUrl = pageEkbUrl;
      }
      if (queryMsg === 'plan9') {
        isPhoto = true;
        inlineKeyText = '–ü–ª–∞–Ω 9 —ç—Ç–∞–∂–∞';
        photoUrl = PICTURE.PLAN9;
        redirectUrl = pageEkbUrl;
      }
      if (queryMsg === '8floor') {
        isPhoto = false;
        let url = URL.GET801;
        botMsg = await sendQuantity(url) + ` —Ä.–º. –∑–∞–Ω—è—Ç–æ`;
        redirectUrl = pageEkbUrl
      }
      if (queryMsg === '9floor') {
        isPhoto = false;
        let url = URL.GET901;
        botMsg = await sendQuantity(url) + ` —Ä.–º. –∑–∞–Ω—è—Ç–æ`;
        redirectUrl = pageEkbUrl
      }
      if (queryMsg === 'textB') {
        isPhoto = true;
        inlineKeyText = '–ì—É–ª—è–µ—Ç –æ–Ω. ' + first_name + ` –¥–∞—à—å –≤–∫—É—Å–Ω—è—à–∫—É ? `;
        photoUrl = PICTURE.BILBO;
        redirectUrl = donateUrl
      }
      if (queryMsg === 'musik') {
        isAudio = true;
        inlineKeyText = '–ï—â–µ –º—É–∑—ã–∫–∏ ?';
        audioUrl = randArr(AUDIO);
      }

      if (isPhoto) {
        msg = {
          'method': 'sendPhoto',
          'photo': photoUrl,
          'chat_id': body.callback_query.from.id,
          'reply_markup': JSON.stringify({
            inline_keyboard: [
              [{
                text: inlineKeyText,
                url: redirectUrl
              }]
            ]
          })
        };
      } else if (isAudio) {
        msg = {
          'method': 'sendAudio',
          'chat_id': body.callback_query.from.id,
          'audio': audioUrl,
          'reply_markup': JSON.stringify({
            keyboard: [
              [{
                text: '–ï—â–µ –º—É–∑—ã–∫–∏ ?'
              }]
            ]
          })
        };
      } else {
        // –®–ª—ë–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
        msg = {
          'method': 'sendMessage',
          'parse_mode': 'HTML',
          'chat_id': body.callback_query.from.id,
          'text': botMsg,
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞:
          'reply_markup': JSON.stringify({
            keyboard: keyboard
          })
        };
      }
    }
    // –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    if (body.message) {
      first_name = body.message.from.first_name;
      if (body.message.text) {
        console.log(`---body.message---` + JSON.stringify(body.message.text))
        const text = body.message.text;
        userMsg = text.toLowerCase();
        if (getTrigger(userMsg)) {
          botMsg = first_name + ', –Ω–µ —Ä—É–≥–∞–π—Å—è, –∞ —Ç–æ –æ–±–∏–∂—É—Å—å!'
        } else if (userMsg === '/start') {
          botMsg = '–ü—Ä–∏–≤–µ—Ç–∏–∫, ' + first_name + '!';
        } else if (userMsg === '–¥–∞–π—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º(–Ω–µ—Ç)') {
          isFlag = true;
          botMsg = '–í–∞—à –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—å—Å—è';
        } else if (userMsg === '/help') {
          botMsg = '–ù–∞–∂–∏–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª—É—á–∏—à—å –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –Ω—É–∂–Ω–Ω–æ –∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞–±–µ—Ä–∏ "–ü–æ–∏—Å–∫ {–Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞} {–ò–º—è–§–∞–º–∏–ª–∏—è}".–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —É–º–Ω–∞—è –º—ã—Å–ª—å - –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–º–Ω–∞—è –º—ã—Å–ª—å", –∏ –ø–æ–ª—É—á–∏ –∏—Ö –±–µ—Å–ø–ª–∞—Ç–Ω–æ.';
        } else if (~userMsg.indexOf(`–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É`)) { //–∏–ª–∏ ~ –∏–ª–∏ includes
          botMsg = '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞ ';
        } else if (userMsg.includes(`–ø–æ–∏—Å–∫ 8 `)) { //–∏–ª–∏ ~ –∏–ª–∏ includes
          const index = userMsg.slice(8)
          const url = URL.GET801
          const arrayWorkedSpace9 = await forTitleFilter(url, index)
          // –≤—ã–¥–∞–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –≤—Å–µ ?
          // –∞ –µ—Å–ª–∏ –±—É–¥—É—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ? –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–æ...
          console.log(arrayWorkedSpace9.length)
          if (arrayWorkedSpace9.length > 0) {
            botMsg = `–†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ ‚Ññ` + arrayWorkedSpace9[0].id + ` –Ω–∞ 9 —ç—Ç–∞–∂–µ`;
          } else {
            botMsg = `–ù–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞`;
          }
        } else if (userMsg.includes(`–ø–æ–∏—Å–∫ 9 `)) { //–∏–ª–∏ ~ –∏–ª–∏ includes
          const index = userMsg.slice(8)
          const url = URL.GET901
          const arrayWorkedSpace9 = await forTitleFilter(url, index)
          // –≤—ã–¥–∞–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –≤—Å–µ ?
          // –∞ –µ—Å–ª–∏ –±—É–¥—É—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ? –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–æ...
          console.log(arrayWorkedSpace9.length)
          if (arrayWorkedSpace9.length > 0) {
            botMsg = arrayWorkedSpace9[0].id + ` —Ä.–º –Ω–∞ 9 —ç—Ç–∞–∂–µ`;
          } else {
            botMsg = `–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ 9 —ç—Ç–∞–∂–µ`;
          }
        } else if (userMsg === '—É–º–Ω–∞—è –º—ã—Å–ª—å') { //–∏–ª–∏ ~ –∏–ª–∏ includes
          botMsg = await sendQuote(api);
        } else if (userMsg === '—Ç–µ—Å—Ç') { //–∏–ª–∏ ~ –∏–ª–∏ includes
          botMsg = '<b>bold</b>, <strong>bold</strong> , <i>italic</i> , <em>italic</em> , <a href="https://tlgrm.ru/docs/bots/api#making-requests">inline URL</a> ,  <code>inline fixed-width code</code> , <pre>pre-formatted fixed-width code block</pre>';
        } else if (userMsg === '–∞–¥–º–∏–Ω') { //–∏–ª–∏ ~ –∏–ª–∏ includes
          isSendAdmin = true
        } else if (userMsg === '–∫–∏–Ω—É—Ç—å –º–æ–Ω–µ—Ç–∫—É üëç') {
          isPhoto = false;
          isWebUrl = true
          photoUrl = PICTURE.BILBO;
          botMsg = "[–ù–∞ –≤–∫—É—Å–Ω—è—à–∫—É –¥–ª—è –ë–∏–ª—å–±–æ—à–∫–∏ ! *bold text* _italic text_ ](https://storage.yandexcloud.net/img-bot-bucket/tg-bot-img/1603267171549.jpg)";
          redirectUrl = donateUrl;
          inlineKeyText = "–ö—É–ø–∏—Ç—å –≤–∫—É—Å–Ω—è—à–∫—É";
        } else {
          botMsg = '–î–∞–≤–∞–π –Ω–µ –±—É–¥–µ–º –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è.–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è !';
        }
      }
      if (body.message.contact) {
        console.log(`---body.message.contact---` + JSON.stringify(body.message.contact))
        phone = body.message.contact && body.message.contact.phone_number;
      }

      if (body.message.sticker) {
        console.log(`---—Å—Ç–∏–∫–µ—Ä` + JSON.stringify(body.message.sticker))
        botMsg = `–°—Ç–∏–∫–µ—Ä–∞–º–∏ –Ω–µ –ø–∏—Ç–∞—é—Å—å`
      }
      if (body.message.animation) {
        console.log(`---animation` + JSON.stringify(body.message.animation))
        botMsg = `–Ø –∂–µ –±–æ—Ç –∑–∞—á–µ–º –º–Ω–µ –∞–Ω–∏–º–∞—Ü–∏—è`
      }


      if (isPhoto) {
        msg = {
          'method': 'sendPhoto',
          'photo': photoUrl,
          'chat_id': body.message.chat.id,
          'reply_markup': JSON.stringify({
            inline_keyboard: [
              [{
                text: inlineKeyText,
                url: redirectUrl
              }]
            ]
          })
        };
      } else if (userMsg === '/start') {
        msg = {
          'method': 'sendMessage',
          'parse_mode': 'HTML',
          'chat_id': body.message.chat.id,
          'text': botMsg,
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞:
          'reply_markup': JSON.stringify({
            inline_keyboard: inline_keyboard,
          })
        };
      } else if (userMsg.includes(`–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É`)) {
        msg = {
          'method': 'sendMessage',
          'parse_mode': 'HTML',
          'chat_id': body.message.chat.id,
          'text': botMsg,
          // —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
          'reply_markup': JSON.stringify({
            remove_keyboard: true
          })
        };
      } else if (isWebUrl) {
        msg = {
          'method': 'sendMessage',
          'parse_mode': 'Markdown',
          'disable_web_page_preview': false,
          'chat_id': body.message.chat.id,
          'text': botMsg,
          'reply_markup': JSON.stringify({
            inline_keyboard: [
              [{
                text: inlineKeyText,
                url: redirectUrl
              }]
            ]
          })
        }
      } else {
        // –®–ª—ë–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
        msg = {
          'method': 'sendMessage',
          'parse_mode': 'HTML',
          'chat_id': body.message.chat.id,
          'text': botMsg,
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞:
          'reply_markup': JSON.stringify({
            keyboard: keyboard
          })
        };
      }
      if (isFlag) {
        msg.reply_markup = JSON.stringify({
          resize_keyboard: true,
          keyboard: [
            [{
              text: '–°–æ–æ–±—â–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
              request_contact: true
            }]
          ]
        });
      }
      if (phone) {
        console.log(`phone ` + JSON.stringify(phone));
        fetch(URL.POST, {
            method: 'post',
            body: JSON.stringify(phone),
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(res => res.json())
          .then(
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏:
            botMsg = `<b>${first_name}, —è –ø–æ—Å–ª–∞–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b> –¢–µ–ø–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ - —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω—è—Ç. <i>(–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–∏–∫—Ç–æ –∑–≤–æ–Ω–∏—Ç—å –Ω–µ –±—É–¥–µ—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç).</i>`
          )
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫:
          .catch(err => {
            botMsg = '–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –∏ –ø–æ—ç—Ç–æ–º—É –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
            console.error('Fail sending an order to –∫—É–¥–∞ –Ω–∞–¥–æ: ' + err);
          });

        msg = {
          'method': 'sendMessage',
          'parse_mode': 'HTML',
          'chat_id': body.message.chat.id,
          'text': botMsg,
          'reply_markup': JSON.stringify({
            remove_keyboard: true
          })
        };

      }

      if (isSendAdmin) {
        msg = {
          'method': 'sendMessage',
          'parse_mode': 'HTML',
          'chat_id': idAdmin,
          // 'id': idAdmin,
          'text': "phone",
        };
      }
    }


    console.log(`---msg---` + JSON.stringify(msg))

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram:
    return {
      'statusCode': 200,
      'headers': {
        'Content-Type': 'application/json; charset=utf-8'
      },
      'body': JSON.stringify(msg),
      'isBase64Encoded': false
    };
    // –∏ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ç–æ
  } catch (err) {
    console.error(err);
    return {
      'statusCode': 500,
      'headers': {
        'Content-Type': 'text/plain'
      },
      'isBase64Encoded': false,
      'body': `Internal server error ${err}` // TODO —É–¥–∞–ª–∏—Ç—å ${err} –≤ –ø—Ä–æ–¥–∞–∫—à–Ω-–≤–µ—Ä—Å–∏–∏.
    };
  }
};
